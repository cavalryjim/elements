<% @classname ||= f.object.class.to_s.downcase %>
<div id="<%= @classname %>_form_tabs">
  <ul>
    <li><a href="#<%= @classname %>_tab1">Settings</a></li>
    <li><a href="#<%= @classname %>_tab2">Images</a></li>
  </ul>
  <div id="<%= @classname %>_tab1">
<% f.inputs do %>
  <%= f.input :attachable_type, :as => :hidden, :value => f.object.class.to_s unless f.object.is_a?(Gallery) %>
  <%= f.input :title, :label => 'Title' %>
  <%= f.input :description, :label => 'Description' %>
  <%= f.input :layout_name, :as => :select, :collection => [["Standard", 'standard'], ["Slideshow", 'slideshow'], ["Custom", 'custom']] %>
  <%= f.input :custom_layout_content, :input_html => { :rows => 12, :escape => false }, :wrapper_html => { :id => "#{@classname}_custom_layout_content" } %>
<% end %>
<!-- Add autogrow -->
  </div>
  <div id="<%= @classname %>_tab2">
    <fieldset id="<%= @classname %>">
    <%#= f.inputs :name => 'Picture #%i', :for => :pictures %>
    <%= render f.object.pictures unless f.object.new_record?  %>
      # make these editable...
      # sort out the has_many join and everything should fly
      So heres an idea, lets take the concept of this:
      http://stackoverflow.com/questions/1704142/unobtrusive-dynamic-form-fields-in-rails-with-jquery
      And marry it with this:
      http://ejohn.org/blog/javascript-micro-templating/
    </fieldset>
  </div>
</div>
<script type="text/javascript">
$(document).ready(function() {
  $("#<%= @classname %>_form_tabs").tabs({
    cookie: {
      // store cookie for a day, without, it would be a session cookie
      expires: 1
    }
  });
  if ($("#<%= @classname %>_layout_name").val() != "custom") {
    $("#<%= @classname %>_custom_layout_content").hide();
  }
  $("#<%= @classname %>_layout_name").change(function() {
  switch($(this).val()) {
   case 'custom':
    $('#<%= @classname %>_custom_layout_content').fadeIn();
    break;
   default:
    $('#<%= @classname %>_custom_layout_content').fadeOut();
  }
 });
});
</script>
